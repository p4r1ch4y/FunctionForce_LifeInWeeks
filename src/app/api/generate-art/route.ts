import { NextRequest, NextResponse } from 'next/server';
import { generateArtPrompt } from '@/lib/ai';
import { createClient } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const { events, chapterName, style = 'abstract' } = await request.json();

    if (!events || !Array.isArray(events)) {
      return NextResponse.json(
        { error: 'Events array is required' },
        { status: 400 }
      );
    }

    // Verify user authentication
    const supabase = createClient();

    // Handle authentication check safely
    let session = null;
    try {
      const { data: { session: userSession } } = await supabase.auth.getSession();
      session = userSession;
    } catch (authError) {
      console.warn('Auth check failed:', authError);
    }

    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Extract event descriptions for art prompt generation
    const eventDescriptions = events.map(event => 
      `${event.title}: ${event.description} (${event.sentiment}) [${event.category}]`
    );

    // Generate the art prompt using AI
    const artPrompt = await generateArtPrompt(eventDescriptions);

    // Enhance the prompt based on style preference
    const enhancedPrompt = enhancePromptForStyle(artPrompt, style, chapterName);

    // Generate multiple art variations
    const artVariations = generateArtVariations(enhancedPrompt, chapterName);

    // In a real implementation, you would call an image generation API here
    // For now, we'll return the prompt and placeholder images
    const response = {
      prompt: enhancedPrompt,
      originalPrompt: artPrompt,
      chapterName: chapterName || 'Life Chapter',
      style,
      variations: artVariations,
      // Placeholder images - in production, these would be generated by DALL-E, Midjourney, or Stable Diffusion
      imageUrl: generatePlaceholderImage(chapterName, style),
      thumbnails: artVariations.map((_, index) => 
        generatePlaceholderImage(`${chapterName}_${index}`, style)
      ),
      metadata: {
        eventCount: events.length,
        dominantSentiment: getDominantSentiment(events),
        categories: Array.from(new Set(events.map(e => e.category))),
        timeSpan: getTimeSpan(events),
        generatedAt: new Date().toISOString()
      }
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Error generating art:', error);
    return NextResponse.json(
      { error: 'Failed to generate art' },
      { status: 500 }
    );
  }
}

function enhancePromptForStyle(basePrompt: string, style: string, chapterName?: string): string {
  const styleEnhancements = {
    abstract: 'in an abstract expressionist style with flowing forms and emotional color palettes',
    minimalist: 'in a minimalist style with clean lines, simple shapes, and limited color palette',
    impressionist: 'in an impressionist style with soft brushstrokes and atmospheric lighting',
    geometric: 'in a geometric style with structured forms, patterns, and mathematical precision',
    organic: 'in an organic style with natural forms, flowing curves, and earth-inspired elements',
    digital: 'in a modern digital art style with vibrant colors and contemporary aesthetics',
    watercolor: 'in a watercolor style with soft washes, bleeding colors, and delicate textures',
    collage: 'in a mixed-media collage style combining various textures and visual elements'
  };

  let enhanced = basePrompt;
  
  // Add style enhancement
  if (styleEnhancements[style as keyof typeof styleEnhancements]) {
    enhanced += ` ${styleEnhancements[style as keyof typeof styleEnhancements]}`;
  }

  // Add chapter-specific elements
  if (chapterName) {
    enhanced += `. The artwork should represent the "${chapterName}" phase of life`;
  }

  // Add technical specifications for better AI generation
  enhanced += '. High resolution, professional quality, suitable for framing, emotionally evocative.';

  return enhanced;
}

function generateArtVariations(basePrompt: string, chapterName?: string): string[] {
  const variations = [
    `${basePrompt} with warm, golden hour lighting`,
    `${basePrompt} with cool, contemplative blue tones`,
    `${basePrompt} with vibrant, energetic color contrasts`,
    `${basePrompt} with soft, dreamy pastel colors`,
    `${basePrompt} with bold, dramatic chiaroscuro lighting`
  ];

  return variations.map(variation => {
    if (chapterName) {
      return variation.replace('The artwork', `The "${chapterName}" artwork`);
    }
    return variation;
  });
}

function getDominantSentiment(events: any[]): string {
  const sentimentCounts = events.reduce((acc, event) => {
    acc[event.sentiment] = (acc[event.sentiment] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return Object.entries(sentimentCounts).reduce((a, b) => 
    sentimentCounts[a[0]] > sentimentCounts[b[0]] ? a : b
  )[0];
}

function getTimeSpan(events: any[]): { start: string; end: string; duration: string } {
  if (events.length === 0) {
    return { start: '', end: '', duration: '' };
  }

  const dates = events.map(e => new Date(e.date)).sort((a, b) => a.getTime() - b.getTime());
  const start = dates[0];
  const end = dates[dates.length - 1];
  
  const diffTime = Math.abs(end.getTime() - start.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const diffYears = Math.floor(diffDays / 365);
  const diffMonths = Math.floor((diffDays % 365) / 30);

  let duration = '';
  if (diffYears > 0) {
    duration = `${diffYears} year${diffYears > 1 ? 's' : ''}`;
    if (diffMonths > 0) {
      duration += ` and ${diffMonths} month${diffMonths > 1 ? 's' : ''}`;
    }
  } else if (diffMonths > 0) {
    duration = `${diffMonths} month${diffMonths > 1 ? 's' : ''}`;
  } else {
    duration = `${diffDays} day${diffDays > 1 ? 's' : ''}`;
  }

  return {
    start: start.toISOString().split('T')[0],
    end: end.toISOString().split('T')[0],
    duration
  };
}

function generatePlaceholderImage(chapterName?: string, style?: string): string {
  // Generate a more sophisticated placeholder URL
  const colors = {
    abstract: '6366f1,8b5cf6',
    minimalist: 'f3f4f6,6b7280',
    impressionist: 'fbbf24,f59e0b',
    geometric: '10b981,059669',
    organic: '84cc16,65a30d',
    digital: 'ec4899,be185d',
    watercolor: '06b6d4,0891b2',
    collage: 'f97316,ea580c'
  };

  const colorPair = colors[style as keyof typeof colors] || '6366f1,8b5cf6';
  const text = encodeURIComponent(chapterName || 'Life Chapter');
  
  return `https://via.placeholder.com/512x512/${colorPair.replace(',', '/')}?text=${text}`;
}

// Additional endpoint for getting art styles
export async function GET(request: NextRequest) {
  const styles = [
    { id: 'abstract', name: 'Abstract Expressionist', description: 'Emotional, flowing forms with vibrant colors' },
    { id: 'minimalist', name: 'Minimalist', description: 'Clean lines and simple shapes' },
    { id: 'impressionist', name: 'Impressionist', description: 'Soft brushstrokes and atmospheric lighting' },
    { id: 'geometric', name: 'Geometric', description: 'Structured forms and mathematical precision' },
    { id: 'organic', name: 'Organic', description: 'Natural forms and earth-inspired elements' },
    { id: 'digital', name: 'Digital Art', description: 'Modern, vibrant contemporary aesthetics' },
    { id: 'watercolor', name: 'Watercolor', description: 'Soft washes and delicate textures' },
    { id: 'collage', name: 'Mixed Media', description: 'Combined textures and visual elements' }
  ];

  return NextResponse.json({ styles });
}
